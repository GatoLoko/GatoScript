#!/usr/bin/env python
# coding: utf-8

#Instalador de GatoScript
import os

# Variables del entorno de trabajo
home = os.environ["HOME"]
directorio_xchat = os.path.join(home, "/.xchat2/")
directorio_actual = os.getcwd()
gatoscript = os.path.join(directorio_xchat, "gatoscript.py")
# Archivos a modificar
archivo_ctcp = directorio_xchat + "ctcpreply.conf"
xchatconf = directorio_xchat + "xchat.conf"
ctcp_existe = False

# Esta funcion nos devuelve el valor de una entrada (conf) en el archivo de
# configuracion de X-Chat.
def conf_busqueda(conf):
    global xchatconf
    archivo = file(xchatconf, "r")
    for linea in archivo.readlines():
        opcion, valor = linea[0:len(linea)-1].split(' = ')
        if (opcion == conf):
            return valor
    archivo.close

# Esta funcion modifica el valor (nuevo) de un campo (conf) en el archivo de
# configuracion de X-Chat.
def conf_cambia(conf,nuevo):
    global xchatconf
    archivo = file(xchatconf, "r")
    memoria = archivo.read().split("\n")
    archivo.close
    print len(memoria)
    for i in range(len(memoria)-1):
        if memoria[i] != "":
            opcion, valor = memoria[i].split(' = ')
            if (opcion == conf):
                memoria[i] = opcion + " = " + nuevo + "\n"
    archivo = file(xchatconf, "w")
    archivo.writelines(memoria)
    archivo.close

# La siguiente variable contiene las lineas que deben a√±adirse al archivo de
# respuestas ctcp para mostrar que se esta usando GatoScript cuando se reciba
# un ctcp version.
lineas_ctcp = [
"NAME VERSION\n",
"CMD nctcp %s VERSION GatoScript for X-Chat\n",
"\n"
]

# Si existe el directorio gatoscript, realizamos una actualizacion en lugar de
# una instalacion completa.
if os.path.exists(gatoscript):
    actualizacion = 1
    print "Se ha detectado una version anterior de GatoScript, se realizara una actualizacion"
else:
    actualizacion = 0

## Instalamos los archivos del script
os.system("cp -r %s %s" %(directorio_actual + "/*",directorio_xchat))
os.system("rm %sinstalador" %directorio_xchat)

# Si no es la primera vez que se instala el GatoScript no modificaremos
# ninguna configuracion.
if actualizacion != 1:
    # Configuramos la respuesta ctcp con la version del script
    if os.path.exists(archivo_ctcp):
        archivo = file(archivo_ctcp)
        for linea in archivo:
            if "CMD nctcp %s VERSION GatoScript" in linea:
                ctcp_existe = True
        archivo.close()
        if not ctcp_existe:
            archivo = file(archivo_ctcp, "a")
            archivo.writelines(lineas_ctcp)
            archivo.close()
    # Cambiamos el orden de completado de nicks por uno que comete menos errores
    conf_cambia("completion_sort", "1")
    # Cambiamos el tipo de ban por uno que mejora las protecciones del script
    conf_cambia("irc_ban_type", "1")
    # Ocultamos el nombre de usuario del sistema
    conf_cambia("irc_user_name", "GatoScript")
    # Activamos coloreado de nicks?
    conf_cambia("text_color_nicks", "1")
    print "Instalacion completada"
else:
    print "Actualizacion completada"

# Mensajes de aviso para que quienes lo instalen
mensaje = """Para algunas funciones de GatoScript son necesarias las siguientes librerias externas indicadas a continuacion:

Uso                   | Libreria
-----------------------------------
Control de XMMS       | python-xmms
Control de Rhythmbox  | python-dbus

Si quiere utilizar alguna de esas funciones, instale la correspondiente."""
print mensaje
